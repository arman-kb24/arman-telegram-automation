"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPhoneNumber = exports.getPassword = exports.getName = exports.getEmailCode = exports.getEmailAddress = exports.getAuthCode = exports.confirmOnAnotherDevice = void 0;
var readline = _interopRequireWildcard(require("readline"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function prompt(query) {
  return new Promise((resolve, reject) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.on('SIGINT', () => {
      rl.close();
      reject(new Error('Cancelled'));
    });
    rl.on('error', reject);
    rl.question(query, answer => {
      rl.close();
      resolve(answer.replace(/[\r\n]*$/, ''));
    });
  });
}
const getPhoneNumber = retry => prompt(retry ? 'Invalid phone number, please re-enter: ' : 'Please enter your phone number: ');
exports.getPhoneNumber = getPhoneNumber;
const getEmailAddress = () => prompt('Please enter your email address: ');
exports.getEmailAddress = getEmailAddress;
const getEmailCode = () => prompt('Please enter the email auth code you received: ');
exports.getEmailCode = getEmailCode;
const confirmOnAnotherDevice = link => console.log(`Please confirm on another device: ${link}`);
exports.confirmOnAnotherDevice = confirmOnAnotherDevice;
const getAuthCode = retry => prompt(retry ? 'Wrong auth code, please re-enter: ' : 'Please enter the auth code you received: ');
exports.getAuthCode = getAuthCode;
const getPassword = (passwordHint, retry) => {
  const hint = passwordHint ? ` (hint: "${passwordHint}")` : '';
  const query = retry ? `Wrong password, please re-enter${hint}: ` : `Please enter your 2FA password${hint}: `;
  return prompt(query);
};
exports.getPassword = getPassword;
const getName = async () => ({
  firstName: await prompt('Please enter your first name: '),
  lastName: (await prompt('Please enter your last name (optional): ')) || undefined
});
exports.getName = getName;